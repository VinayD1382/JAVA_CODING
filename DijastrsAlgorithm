public class DijastersAlgorithm {
  static class Graph{
	  int[][] adjustmatrix;
	  String[] vertexdata;
	  int size;
	  Graph(int size){
		  this.size = size;
		  this.adjustmatrix = new int[size][size];
		  this.vertexdata = new String[size];
	  }
	  
	  public void addedge(int edge,String data) {
		  if(edge>=0 && edge<size) {
			  vertexdata[edge] = data;
		  }
	  }
	  public void addvertex(int u,int v,int weight) {
		  if(u>=0 && u<size && v>=0 && v<size) {
			  adjustmatrix[u][v] = weight;
			  adjustmatrix[v][u] = weight;
			  
		  }
	  }
	  public int[] dijastra(String Vertexvalue) {
		  int indexval = findindex(Vertexvalue);
		  int[] distance = new int[size];
		  boolean[] visited = new boolean[size];
		  
		  for(int i=0;i<size;i++) {
			  distance[i] = Integer.MAX_VALUE;
		  }
		  distance[indexval] = 0;
		  for(int i=0;i<size;i++) {
		  int u = mindistance(distance,visited);
		  
		  if(u==-1) break;
		  
		  visited[u] = true;
		  for(int v=0;v<size;v++) {
			  if(!visited[v] && adjustmatrix[u][v] !=0 && distance[u]!=Integer.MAX_VALUE) {
				  int newdist = distance[u] + adjustmatrix[u][v];
				  if(newdist<distance[v]) {
					  distance[v] = newdist;
				  }
			  }
		  }
		  }
		  return distance;
	  }
	  private int mindistance(int[] distance,boolean[] visited) {
		  int min = Integer.MAX_VALUE, minindexs = -1;
		  for(int i=0;i<size;i++) {
			  if(!visited[i] && distance[i]<min) {
				  min = distance[i];
				  minindexs = i;
			  }
		  }
		  return minindexs;
	  }
	  private int findindex(String vertexvalue) {
		  for(int i=0;i<size;i++) {
			  if(vertexdata[i].equals(vertexvalue));
			  return i;
		  }
	    return -1;
	  }
	  
  }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Graph g = new Graph(7);
		g.addedge(0, "A");
		g.addedge(1, "B");
		g.addedge(2, "C");
		g.addedge(3, "D");
		g.addedge(4, "E");
		g.addedge(5, "F");
		g.addedge(6, "G");
		g.addvertex(3, 0, 4); // D - A, weight 4
	    g.addvertex(3, 4, 2); // D - E, weight 2
	    g.addvertex(0, 2, 3); // A - C, weight 3
	    g.addvertex(0, 4, 4); // A - E, weight 4
	    g.addvertex(4, 2, 4); // E - C, weight 4
	    g.addvertex(4, 6, 5); // E - G, weight 5
	    g.addvertex(2, 5, 5); // C - F, weight 5
	    g.addvertex(2, 1, 2); // C - B, weight 2
	    g.addvertex(1, 5, 2); // B - F, weight 2
	    g.addvertex(6, 5, 5); // G - F, weight 5
	    System.out.println("The Source of Graph start from G");
	    int[] res = g.dijastra("G");
	    for(int i=0;i<res.length;i++) {
	    System.out.println("Shortest path from G to " + g.vertexdata[i] + " : " + res[i]);
	    }
	}

}
