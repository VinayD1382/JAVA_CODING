Routing : 
Routing in Angular is used to view different component pages without refreshing the pages
Sassy css

Create a new Project : ng new routing-demo

cd routing-demo

run the server : ng serve -o


spec.ts : test cases to verify the component works are not.

app.routes.ts

  { path: '', redirectTo: 'home', pathMatch: 'full' }, 
//path is empty direct to home and once again confirm that pathmatchs full empty only  
  { path: '**', redirectTo: 'home' } 
if /any values /abc, /ann direct to home

contact.ts : 
import { Component } from '@angular/core';

@Component({
  selector: '',  //if <app-contact> used in html
  imports: [],
  templateUrl: './contact.html',
  styleUrl: './contact.scss'
})
export class ContactComponent {

}

standalone : before v14 all thing need to add in NgModule but insted now we can make standalone : true.

step :
1)index.html
2)main.ts : 
  /*It says bootstrap to use app as component and with configuration as app.config */
3)app.ts : it will find the app-root in index.html
4)app.config : to activate the router 
5) routers called here


DI : 
CartPage
@Component({...})
export class CartPage {
  items: string[] = [];

  constructor(private cartService: CartService) {}

  ngOnInit() {
    this.items = this.cartService.getItems();
  }
}


üëâ Now the same CartService instance is shared across Kids, Toys, and CartPage.

Add from Kids ‚Üí goes into same cart.

Add from Toys ‚Üí also goes into same cart.

CartPage shows both items.

Case 2: Using new CartService() (‚ùå Wrong way)
export class KidsComponent {
  cartService = new CartService(); // New instance here
  ...
}

export class ToysComponent {
  cartService = new CartService(); // Another new instance
  ...
}

export class CartPage {
  cartService = new CartService(); // Another new instance
  ...
}


üëâ Each component has its own cart.

Add from Kids ‚Üí stored in KidsComponent‚Äôs cart only.

Add from Toys ‚Üí stored in ToysComponent‚Äôs cart only.

CartPage ‚Üí empty, because it uses a different cart.

‚ö°Ô∏èResult: Your cart page never shows all items together ‚Üí broken shopping cart.



import { Component, signal } from '@angular/core';
import { FormGroup, FormControl, ReactiveFormsModule } from '@angular/forms';
import { NgIf, CommonModule } from '@angular/common';
import { ContactService } from './contact.service';

@Component({
  selector: 'app-contact',
  standalone: true,
  imports: [
    CommonModule,      
    ReactiveFormsModule 
  ],
  templateUrl: './contact.html',
  styleUrls: ['./contact.scss']
})
export class ContactComponent {
  message = '';
 messageSignal = signal('');
 /*wont check entire component instaed only <p> */
  contactForm = new FormGroup({
    name: new FormControl(''),
    email: new FormControl('')
  });

  constructor(private contactService: ContactService) {}
  /*This is Dependency Injection : so instead of creating (new contactservice) manually 
  it will created by angular, so used in 30 line 
  Every time you call new, you get a separate instance.Angular has no control over this instance.
  like toys,kids section adding cart uses single cartpage here use sngle DI*/

  onSubmit() {
    const { name, email } = this.contactForm.value;
    this.message = this.contactService.sendMessage(name!, email!);
/*This will check all component line and provide output */
    this.messageSignal.set(this.contactService.sendMessage(name!, email!));
  /*But this with signal only check sendmessage() <p> */
  }
}

