//Small change in dijestras gives prims

public class Main {
    static class Graph {
        int[][] adjMatrix;
        int size;
        String[] vertexData;

        Graph(int size) {
            this.size = size;
            this.adjMatrix = new int[size][size];
            this.vertexData = new String[size];
        }

        public void addEdge(int u, int v, int weight) {
            if (u >= 0 && u < size && v >= 0 && v < size) {
                adjMatrix[u][v] = weight;
                adjMatrix[v][u] = weight;
            }
        }

        public void addVertex(int vertex, String data) {
            if (vertex >= 0 && vertex < size) {
                vertexData[vertex] = data;
            }
        }

        public void primMST(String startnode) {
           int[] parent = new int[size];  // create a array to store the connect not values
           int[] distance = new int[size];
           boolean[] visited = new boolean[size];
           int selectindex = findIndex(startnode);
           for(int i=0;i<size;i++){
               distance[i] = Integer.MAX_VALUE;
           }
           distance[selectindex] = 0;
           for(int count=0;count<size-1;count++){ // we are not storing any value at start no so count-1.
               int u = minDistanceVertex( distance, visited);
               if(u==-1) break;
               visited[u] = true;
           for(int v=0;v<size;v++){
            if(!visited[v] && adjMatrix[u][v] !=0 && adjMatrix[u][v]!=Integer.MAX_VALUE){//we are comparing adjmatrix<infinity
                   if(adjMatrix[u][v]<distance[v]){ // if that true add to parent arry
                   parent[v] = u;
                   distance[v] = adjMatrix[u][v]; // change the distance to adjmatrix value
                }
               }
           }
           }
           printMST(parent);
        }

        int minDistanceVertex(int[] distance, boolean[] visited) {
            int min = Integer.MAX_VALUE, minIndex = -1;

            for (int v = 0; v < size; v++) {
                if (!visited[v] && distance[v] < min) {
                    min = distance[v];
                    minIndex = v;
                }
            }

            return minIndex;
        }

        void printMST(int[] parent) {
            System.out.println("Edge \tWeight");
            for (int i = 0; i < size; i++) {
                if (parent[i] != -1) { // Skip printing the edge for the starting node
                    System.out.println(vertexData[parent[i]] + " - " + vertexData[i] + "\t" + adjMatrix[i][parent[i]]); // small change in printing
                }
            }
        }

       private int findIndex(String startnode) {
            for (int i = 0; i < size; i++) {
                if (vertexData[i].equals(startnode)) {
                    return i;
                }
            }
            return -1;
        }
    }

    public static void main(String[] args) {
        Graph g = new Graph(7);
        g.addVertex(0, "A");
        g.addVertex(1, "B");
        g.addVertex(2, "C");
        g.addVertex(3, "D");
        g.addVertex(4, "E");
        g.addVertex(5, "F");
        g.addVertex(6, "G");

        g.addEdge(3, 0, 4); // D - A, weight 4
        g.addEdge(3, 4, 2); // D - E, weight 2
        g.addEdge(0, 2, 3); // A - C, weight 3
        g.addEdge(0, 4, 4); // A - E, weight 4
        g.addEdge(4, 2, 4); // E - C, weight 4
        g.addEdge(4, 6, 5); // E - G, weight 5
        g.addEdge(2, 5, 5); // C - F, weight 5
        g.addEdge(2, 1, 2); // C - B, weight 2
        g.addEdge(1, 5, 2); // B - F, weight 2
        g.addEdge(6, 5, 5); // G - F, weight 5

        g.primMST("G");
    }
}
